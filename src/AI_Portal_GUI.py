#! /usr/bin/env python
#  -*- coding: utf-8 -*-
#
# GUI module generated by PAGE version 4.13
# In conjunction with Tcl version 8.6
#    May 31, 2018 04:40:07 PM

import sys
import os
import csv

try:
    from Tkinter import *
except ImportError:
    from tkinter import *
    from tkinter import messagebox

try:
    import ttk
    py3 = False
except ImportError:
    import tkinter.ttk as ttk
    py3 = True

import AI_Portal_GUI_support

def vp_start_gui():
    '''Starting point when module is the main routine.'''
    global val, w, root
    root = Tk()
    AI_Portal_GUI_support.set_Tk_var()
    top = New_Toplevel (root)
    AI_Portal_GUI_support.init(root, top)
    root.mainloop()

w = None
def create_New_Toplevel(root, *args, **kwargs):
    '''Starting point when module is imported by another program.'''
    global w, w_win, rt
    rt = root
    w = Toplevel (root)
    AI_Portal_GUI_support.set_Tk_var()
    top = New_Toplevel (w)
    AI_Portal_GUI_support.init(w, top, *args, **kwargs)
    return (w, top)

def destroy_New_Toplevel():
    global w
    w.destroy()
    w = None

global RADLEX_lut
RADLEX_lut = list()

global RADLEX_lut_num
RADLEX_lut_num = list()

global playbook_lut
playbook_lut = list()

global playbook_lut_num
playbook_lut_num = list()

global playbook_incl
playbook_incl = list()

global RADLEX_incl
RADLEX_incl = list()

global RADLEX
RADLEX = dict()

global playbook
playbook = dict()

global RAD2L
RAD2L = dict()

class New_Toplevel:
    def AddProc(self):
        s = self.Procedure_box.curselection()
        g = self.Procedure_box.get(0,END)
        for i in s:
            self.Procedure_box_selected.insert('end',g[i])
            playbook_incl.append(playbook[g[i]])
            
    def DelProc(self):
        s = self.Procedure_box_selected.curselection()
        for i in reversed(s):
            self.Procedure_box_selected.delete(i)
            playbook_incl.delete(i)

    def Proc_Filter(self):
        match = [ s for s in playbook_lut if self.Proc_search.get().upper() in s.upper() ]
        #if not self.Proc_search.get():
        #    print('Empty')
        self.Procedure_box.delete(0,END)
        for i in match:
            self.Procedure_box.insert('end',i)
        return True

    def AddDiag(self):
        s = self.Diag_box.curselection()
        g = self.Diag_box.get(0,END)
        for i in s:
            self.Diag_box_selected.insert('end',g[i])
            RADLEX_incl.append(RADLEX[g[i]])

    def DelDiag(self):
        s = self.Diag_box_selected.curselection()
        for i in reversed(s):
            self.Diag_box_selected.delete(i)
            RADLEX_incl.delete(i)

    def Diag_Filter(self):
        match = [ s for s in RADLEX_lut if self.Diag_search.get().upper() in s.upper() ]
        self.Diag_box.delete(0,END)
        for i in match:
            self.Diag_box.insert('end',i)
        return True

    def Preview_dataset(self):
        print('Previewing Dataset...')
        previewMessage = 'Dataset Criteria: \r\n'
        #modality
        modality = self.modality_box.get()
        previewMessage += 'Modality: ' + modality + '\r\n'

        #date range
        dateRange = str(self.start_month.get()) + "/" + str(self.start_day.get()) + "/" + str(self.start_year.get()) + " to " + str(self.stop_month.get()) + "/" + str(self.stop_day.get()) + "/" + str(self.stop_year.get())
        previewMessage += 'Date Range: ' + dateRange + '\r\n'

        #procedure
        procedureNames = []
        for procedureCode in playbook_incl:
            procedureName = [key for key, value in playbook.items() if value == procedureCode][0]
            procedureNames.append(procedureName)
        procedureNames = ', '.join(procedureNames)
        previewMessage += 'Selected Procedures: ' + procedureNames + '\r\n'

        #findings
        findings = self.Entry4_find_cont.get()
        if findings:
            previewMessage += 'Findings Include: ' + findings + '\r\n'

        #impression
        impression = self.Entry4_impr_cont.get()
        if impression:
            previewMessage += 'Impression Include: ' + impression + '\r\n'

        #recommendation
        recommendation = self.rec_box.get()
        previewMessage += 'Radiologist Recommendation: ' + recommendation + '\r\n'

        #critical results
        criticalResultsSelections = []
        if self.cat1_button.state():
            criticalResultsSelections.append('any')
        if self.cat2_button.state():
            criticalResultsSelections.append('past smoker')
        if self.cat3_button.state():
            criticalResultsSelections.append('current smoker')
        criticalResultsSelections = ', '.join(criticalResultsSelections)
        previewMessage += 'Selected smoking status: ' + criticalResultsSelections + '\r\n'

        #diagnosis
        diagnosisNames = []
        for diagnosisCode in RADLEX_incl:
            diagnosisName = [key for key, value in RADLEX.items() if value == diagnosisCode][0]
            diagnosisNames.append(diagnosisName)
        diagnosisNames = ', '.join(diagnosisNames)
        previewMessage += 'Selected Diagnoses: ' + diagnosisNames + '\r\n'

        #age range
        ageRange = str(self.patient_range_year1.get()) + " to " + str(self.patient_range_year2.get())
        previewMessage += 'Age Range: ' + ageRange + '\r\n'

        #sex
        sexSelection = []
        if self.any_sex_button.state():
            sexSelection.append('any')
        if self.M_sex_button.state():
            sexSelection.append('male')
        if self.F_sex_button.state():
            sexSelection.append('female')
        if self.other_sex_button.state():
            sexSelection.append('other')
        sexSelection = ', '.join(sexSelection)
        previewMessage += 'Selected sexes: ' + sexSelection + '\r\n'

        #smoking
        smokingSelection = []
        if self.any_smoker_button.state():
            smokingSelection.append('any')
        if self.past_smoker_button.state():
            smokingSelection.append('past smoker')
        if self.current_smoker_button.state():
            smokingSelection.append('current smoker')
        if self.never_smoker_button.state():
            smokingSelection.append('never smoked')
        smokingSelection = ', '.join(smokingSelection)
        previewMessage += 'Selected smoking status: ' + smokingSelection + '\r\n'

        #ethinicity
        ethnicity = self.Patient_ethn_box.get()
        previewMessage += 'Selected Ethnicities/Races: ' + ethnicity + '\r\n'
        #max
        maxStudies = self.max_studies.get()
        previewMessage += 'Max number of studies: ' + maxStudies + '\r\n'
        #source
        #get reports
        #get studies with reports
        #create research PID
        messagebox.showinfo('Preview', previewMessage)

    def Submit_query(self):
        print('Submitting query...')
        modality = self.modality_box.get()
        #print(modality)
        
        day_start = self.start_day.get()
        month_start = self.start_month.get()
        year_start = self.start_year.get()
        date_start = [day_start,month_start,year_start]
        #print(date_start)
        
        proc_codes = playbook_incl
        findings = self.findings_cont.get()
        impressions = self.impressions_cont.get()
        #print(findings)
        #print(impressions)
        
        recommendations = self.rec_box.get()
        #print(recommendations)
        
        crit_results = [AI_Portal_GUI_support.crit.get(),AI_Portal_GUI_support.crit2.get(),
        AI_Portal_GUI_support.crit3.get()]
        #print(crit_results)
        
        diag = RADLEX_incl
        
        age1 = self.patient_range_year1.get()
        age2 = self.patient_range_year2.get()
        age_range = [age1,age2]
        #print(age_range)
        
        sex = [AI_Portal_GUI_support.sex_select.get(),AI_Portal_GUI_support.sex_select2.get(),
        AI_Portal_GUI_support.sex_select3.get(),AI_Portal_GUI_support.sex_select4.get()]
        
        smoke = [AI_Portal_GUI_support.smoke_select.get(),AI_Portal_GUI_support.smoke_select2.get(),
        AI_Portal_GUI_support.smoke_select3.get(),AI_Portal_GUI_support.smoke_select4.get()]
        #print(sex)
        #print(smoke)
        
        race = self.Patient_ethn_box.get()
        #print(race)
        
        num_studies = self.max_studies.get()
        source = self.Retrieve_src.get()
        #print(num_studies)
        #print(source)
        
        reports = AI_Portal_GUI_support.get_reports.get()
        only_reports = AI_Portal_GUI_support.get_only_reports.get()
        rpid = AI_Portal_GUI_support.research_PID.get()
        #print(reports)
        #print(only_reports)
        #print(rpid)
        

    def Get_DICOM_images(self):
        print("Getting DICOM images...")

    def __init__(self, top=None):
        #spacing variables
        leftMargin = 0.015
        topMargin = 0.08
        labelHeight = 31
        labelWidth = 76

        '''This class configures and populates the toplevel window.
           top is the toplevel containing window.'''
        _bgcolor = '#d9d9d9'  # X11 color: 'gray85'
        _fgcolor = '#000000'  # X11 color: 'black'
        _compcolor = '#d9d9d9' # X11 color: 'gray85'
        _ana1color = '#d9d9d9' # X11 color: 'gray85' 
        _ana2color = '#d9d9d9' # X11 color: 'gray85' 
        self.style = ttk.Style()
        if sys.platform == "win32":
            self.style.theme_use('winnative')
        self.style.configure('.',background=_bgcolor)
        self.style.configure('.',foreground=_fgcolor)
        self.style.configure('.',font="TkDefaultFont")
        self.style.map('.',background=
            [('selected', _compcolor), ('active',_ana2color)])

        top.geometry("1333x826+415+167")
        top.title("New Toplevel")
        top.configure(background="#d9d9d9")

        #self.root = Tk()
        
        with open('../lib/RADlex.csv', 'r') as csvfile:
            reader = csv.reader(csvfile)
            for row in reader:
                if row[0] != 'Name or Synonym':
                    RADLEX_lut.append(row[0])
                    RADLEX_lut_num.append(row[1])
                    #self.Procedure_box.insert('end', row[0])
        with open('../lib/complete-playbook-2_5.csv', 'r') as csvfile:
            reader = csv.reader(csvfile)
            for row in reader:
                if row[0] != 'RPID':
                    playbook_lut.append(row[4])
                    playbook_lut_num.append(row[0])

        with open('../lib/RADLEX_to_LOINC.csv','r') as csvfile:
            reader = csv.reader(csvfile)
            for row in reader:
                if row[0] != 'LoincNumber':
                    RAD2L_lut_LOINC.append(row[0])
                    RAD2L_lut_RAD.append(row[6])
        
        RAD2L.update(zip(RAD2L_lut_RAD,RAD2L_lut_LOINC))          
        RADLEX.update(zip(RADLEX_lut,RADLEX_lut_num))
        playbook.update(zip(playbook_lut,playbook_lut_num))
        self.menubar = Menu(top,font="TkMenuFont",bg=_bgcolor,fg=_fgcolor)
        top.configure(menu = self.menubar)

        self.style.configure('TNotebook.Tab', background=_bgcolor)
        self.style.configure('TNotebook.Tab', foreground=_fgcolor)
        self.style.map('TNotebook.Tab', background=
            [('selected', _compcolor), ('active',_ana2color)])
        self.TNotebook1 = ttk.Notebook(top)
        self.TNotebook1.place(relx=0.03, rely=0.04, relheight=0.92
                , relwidth=0.94)
        self.TNotebook1.configure(width=1254)
        self.TNotebook1.configure(takefocus="")
        self.Study_tab = Frame(self.TNotebook1)
        self.TNotebook1.add(self.Study_tab, padding=3)
        self.TNotebook1.tab(0, text="Study Criteria", compound="left"
                ,underline="-1", )
        self.Study_tab.configure(background="#d9d9d9")
        self.Study_tab.configure(highlightbackground="#d9d9d9")
        self.Study_tab.configure(highlightcolor="black")
        self.Diagnosis_tab = Frame(self.TNotebook1)
        self.TNotebook1.add(self.Diagnosis_tab, padding=3)
        self.TNotebook1.tab(1, text="Diagnosis and Results Criteria"
                ,compound="left", underline="-1", )
        self.Diagnosis_tab.configure(background="#d9d9d9")
        self.Diagnosis_tab.configure(highlightbackground="#d9d9d9")
        self.Diagnosis_tab.configure(highlightcolor="black")
        self.Patient_tab = Frame(self.TNotebook1)
        self.TNotebook1.add(self.Patient_tab, padding=3)
        self.TNotebook1.tab(2, text="Patient Criteria", compound="none"
                ,underline="-1", )
        self.Patient_tab.configure(background="#d9d9d9")
        self.Patient_tab.configure(highlightbackground="#d9d9d9")
        self.Patient_tab.configure(highlightcolor="black")
        self.Dataset_tab = Frame(self.TNotebook1)
        self.TNotebook1.add(self.Dataset_tab, padding=3)
        self.TNotebook1.tab(3, text="Data Set Options", compound="none"
                ,underline="-1", )
        self.Dataset_tab.configure(background="#d9d9d9")
        self.Dataset_tab.configure(highlightbackground="#d9d9d9")
        self.Dataset_tab.configure(highlightcolor="black")
        self.Download_tab = Frame(self.TNotebook1)
        self.TNotebook1.add(self.Download_tab, padding=3)
        self.TNotebook1.tab(4, text="Download Options", compound="none"
                ,underline="-1", )
        self.Download_tab.configure(background="#d9d9d9")
        self.Download_tab.configure(highlightbackground="#d9d9d9")
        self.Download_tab.configure(highlightcolor="black")

        self.Label2 = Label(self.Study_tab, anchor='w')
        self.Label2.place(relx=leftMargin, rely=topMargin, height=labelHeight, width=labelWidth)
        self.Label2.configure(background="#d9d9d9")
        self.Label2.configure(disabledforeground="#a3a3a3")
        self.Label2.configure(foreground="#000000")
        self.Label2.configure(text='''Modality''')

        self.Label2_1 = Label(self.Study_tab, anchor='w')
        self.Label2_1.place(relx=leftMargin, rely=0.14, height=labelHeight, width=labelWidth)
        self.Label2_1.configure(activebackground="#f9f9f9")
        self.Label2_1.configure(activeforeground="black")
        self.Label2_1.configure(background="#d9d9d9")
        self.Label2_1.configure(disabledforeground="#a3a3a3")
        self.Label2_1.configure(foreground="#000000")
        self.Label2_1.configure(highlightbackground="#d9d9d9")
        self.Label2_1.configure(highlightcolor="black")
        self.Label2_1.configure(justify=LEFT)
        self.Label2_1.configure(text='''Date Range''')
        self.Label2_1.configure(width=96)

        self.Label2_2 = Label(self.Study_tab, anchor='w')
        self.Label2_2.place(relx=leftMargin, rely=0.19, height=31, width=146)
        self.Label2_2.configure(activebackground="#f9f9f9")
        self.Label2_2.configure(activeforeground="black")
        self.Label2_2.configure(background="#d9d9d9")
        self.Label2_2.configure(disabledforeground="#a3a3a3")
        self.Label2_2.configure(foreground="#000000")
        self.Label2_2.configure(highlightbackground="#d9d9d9")
        self.Label2_2.configure(highlightcolor="black")
        self.Label2_2.configure(justify=LEFT)
        self.Label2_2.configure(text='''Procedure Search''')
        self.Label2_2.configure(width=146)

        self.modality_box = ttk.Combobox(self.Study_tab)
        self.modality_box.place(relx=0.17, rely=0.08, relheight=0.04
                , relwidth=0.37)
        self.modality_box.configure(textvariable=AI_Portal_GUI_support.combobox)
        self.modality_box.configure(width=462)
        self.modality_box.configure(takefocus="")
        self.modality_box['values'] = ('CT','XR','PET','US','NM','MR','XA','CR','DR','FL')
        
        #v_m = (self.root.register(self.validate_month),'%S')

        self.start_month = ttk.Combobox(self.Study_tab)
        self.start_month['values'] = list(range(1,13))
        self.start_month.current(0)
        self.start_month.place(relx=0.17, rely=0.14, relheight=0.04, relwidth=0.03)
        self.start_month.configure(background="white")
        self.start_month.configure(foreground="black")
        #self.start_month.configure(width=38)

        self.start_day = ttk.Combobox(self.Study_tab)
        self.start_day['values'] = list(range(1, 32))
        self.start_day.current(0)
        self.start_day.place(relx=0.22, rely=0.14, relheight=0.04
                , relwidth=0.03)
        self.start_day.configure(background="white")
        self.start_day.configure(foreground="black")

        self.start_year = ttk.Combobox(self.Study_tab)
        self.start_year['values'] = list(range(1900, 2020))
        self.start_year.current(100)
        self.start_year.place(relx=0.26, rely=0.14, relheight=0.04
                , relwidth=0.06)
        self.start_year.configure(background="white")
        self.start_year.configure(foreground="black")
        #self.start_year.configure(width=78)

        self.stop_day = ttk.Combobox(self.Study_tab)
        self.stop_day['values'] = list(range(1,32))
        self.stop_day.current(0)
        self.stop_day.place(relx=0.38, rely=0.14, relheight=0.04
                , relwidth=0.03)
        self.stop_day.configure(background="white")
        self.stop_day.configure(foreground="black")

        self.stop_month = ttk.Combobox(self.Study_tab)
        self.stop_month['values'] = list(range(1,13))
        self.stop_month.current(0)
        self.stop_month.place(relx=0.43, rely=0.14, relheight=0.04
                , relwidth=0.03)
        self.stop_month.configure(background="white")
        self.stop_month.configure(foreground="black")

        self.stop_year = ttk.Combobox(self.Study_tab)
        self.stop_year['values'] = list(range(1900, 2020))
        self.stop_year.current(118)
        self.stop_year.place(relx=0.48, rely=0.14, relheight=0.04
                , relwidth=0.06)
        self.stop_year.configure(background="white")
        self.stop_year.configure(foreground="black")

        self.Label2_7 = Label(self.Study_tab, anchor='w')
        self.Label2_7.place(relx=0.2, rely=0.14, height=31, width=16)
        self.Label2_7.configure(activebackground="#f9f9f9")
        self.Label2_7.configure(activeforeground="black")
        self.Label2_7.configure(background="#d9d9d9")
        self.Label2_7.configure(disabledforeground="#a3a3a3")
        self.Label2_7.configure(foreground="#000000")
        self.Label2_7.configure(highlightbackground="#d9d9d9")
        self.Label2_7.configure(highlightcolor="black")
        self.Label2_7.configure(text='''/''')
        self.Label2_7.configure(width=16)

        self.Label2_8 = Label(self.Study_tab, anchor='w')
        self.Label2_8.place(relx=0.25, rely=0.14, height=31, width=16)
        self.Label2_8.configure(activebackground="#f9f9f9")
        self.Label2_8.configure(activeforeground="black")
        self.Label2_8.configure(background="#d9d9d9")
        self.Label2_8.configure(disabledforeground="#a3a3a3")
        self.Label2_8.configure(foreground="#000000")
        self.Label2_8.configure(highlightbackground="#d9d9d9")
        self.Label2_8.configure(highlightcolor="black")
        self.Label2_8.configure(text='''/''')
        self.Label2_8.configure(width=16)

        self.Label2_8 = Label(self.Study_tab, anchor='w')
        self.Label2_8.place(relx=0.42, rely=0.14, height=31, width=16)
        self.Label2_8.configure(activebackground="#f9f9f9")
        self.Label2_8.configure(activeforeground="black")
        self.Label2_8.configure(background="#d9d9d9")
        self.Label2_8.configure(disabledforeground="#a3a3a3")
        self.Label2_8.configure(foreground="#000000")
        self.Label2_8.configure(highlightbackground="#d9d9d9")
        self.Label2_8.configure(highlightcolor="black")
        self.Label2_8.configure(text='''/''')

        self.Label2_8 = Label(self.Study_tab, anchor='w')
        self.Label2_8.place(relx=0.46, rely=0.14, height=31, width=16)
        self.Label2_8.configure(activebackground="#f9f9f9")
        self.Label2_8.configure(activeforeground="black")
        self.Label2_8.configure(background="#d9d9d9")
        self.Label2_8.configure(disabledforeground="#a3a3a3")
        self.Label2_8.configure(foreground="#000000")
        self.Label2_8.configure(highlightbackground="#d9d9d9")
        self.Label2_8.configure(highlightcolor="black")
        self.Label2_8.configure(text='''/''')

        proc_search_var = StringVar()
        proc_search_var.trace("w", lambda name, index, mode, proc_search_var=proc_search_var:New_Toplevel.Proc_Filter(self))
        self.Proc_search = Entry(self.Study_tab, textvariable=proc_search_var)
        self.Proc_search.place(relx=0.17, rely=0.19,height=26, relwidth=0.37)
        self.Proc_search.configure(background="white")
        self.Proc_search.configure(disabledforeground="#a3a3a3")
        self.Proc_search.configure(font="TkFixedFont")
        self.Proc_search.configure(foreground="#000000")
        self.Proc_search.configure(insertbackground="black")
        self.Proc_search.configure(width=464)      

        self.Label2_8 = Label(self.Study_tab, anchor='w')
        self.Label2_8.place(relx=0.34, rely=0.14, height=31, width=16)
        self.Label2_8.configure(activebackground="#f9f9f9")
        self.Label2_8.configure(activeforeground="black")
        self.Label2_8.configure(background="#d9d9d9")
        self.Label2_8.configure(disabledforeground="#a3a3a3")
        self.Label2_8.configure(foreground="#000000")
        self.Label2_8.configure(highlightbackground="#d9d9d9")
        self.Label2_8.configure(highlightcolor="black")
        self.Label2_8.configure(text='''to''')

        self.Procedure_box = ScrolledListBox(self.Study_tab, selectmode='multiple')
        self.Procedure_box.place(relx=0.02, rely=0.25, relheight=0.72
                , relwidth=0.53)
        self.Procedure_box.configure(background="white")
        self.Procedure_box.configure(disabledforeground="#a3a3a3")
        self.Procedure_box.configure(font="TkFixedFont")
        self.Procedure_box.configure(foreground="black")
        self.Procedure_box.configure(highlightbackground="#d9d9d9")
        self.Procedure_box.configure(highlightcolor="#d9d9d9")
        self.Procedure_box.configure(selectbackground="#c4c4c4")
        self.Procedure_box.configure(selectforeground="black")
        self.Procedure_box.configure(width=10)
		
        for label in playbook_lut:
            self.Procedure_box.insert('end',label)
        
        self.Procedure_box_selected = ScrolledListBox(self.Study_tab, selectmode='multiple')
        self.Procedure_box_selected.place(relx=0.57, rely=0.14, relheight=0.83
                , relwidth=0.42)
        self.Procedure_box_selected.configure(background="white")
        self.Procedure_box_selected.configure(disabledforeground="#a3a3a3")
        self.Procedure_box_selected.configure(font="TkFixedFont")
        self.Procedure_box_selected.configure(foreground="black")
        self.Procedure_box_selected.configure(highlightbackground="#d9d9d9")
        self.Procedure_box_selected.configure(highlightcolor="#d9d9d9")
        self.Procedure_box_selected.configure(selectbackground="#c4c4c4")
        self.Procedure_box_selected.configure(selectforeground="black")
        self.Procedure_box_selected.configure(width=10)

        self.Label6 = Label(self.Study_tab, anchor='w')
        self.Label6.place(relx=0.57, rely=0.08, height=31, width=165)
        self.Label6.configure(background="#d9d9d9")
        self.Label6.configure(disabledforeground="#a3a3a3")
        self.Label6.configure(foreground="#000000")
        self.Label6.configure(text='''Selected Procedures''')

        self.Label5 = Label(self.Diagnosis_tab, anchor='w')
        self.Label5.place(relx=0.01, rely=0.31, height=31, width=131)
        self.Label5.configure(background="#d9d9d9")
        self.Label5.configure(disabledforeground="#a3a3a3")
        self.Label5.configure(foreground="#000000")
        self.Label5.configure(text='''Diagnosis Search''')
        self.Label5.configure(width=131)
        
        diag_search_var = StringVar()
        diag_search_var.trace("w", lambda name, index, mode, diag_search_var=diag_search_var:New_Toplevel.Diag_Filter(self))
        self.Diag_search = Entry(self.Diagnosis_tab, textvariable=diag_search_var)
        self.Diag_search.place(relx=0.18, rely=0.31,height=26, relwidth=0.44)
        self.Diag_search.configure(background="white")
        self.Diag_search.configure(disabledforeground="#a3a3a3")
        self.Diag_search.configure(font="TkFixedFont")
        self.Diag_search.configure(foreground="#000000")
        self.Diag_search.configure(insertbackground="black")
        self.Diag_search.configure(width=544)

        self.Diag_box = ScrolledListBox(self.Diagnosis_tab, selectmode='multiple')
        self.Diag_box.place(relx=0.01, rely=0.38, relheight=0.59
                , relwidth=0.61)
        self.Diag_box.configure(background="white")
        self.Diag_box.configure(disabledforeground="#a3a3a3")
        self.Diag_box.configure(font="TkFixedFont")
        self.Diag_box.configure(foreground="black")
        self.Diag_box.configure(highlightbackground="#d9d9d9")
        self.Diag_box.configure(highlightcolor="#d9d9d9")
        self.Diag_box.configure(selectbackground="#c4c4c4")
        self.Diag_box.configure(selectforeground="black")
        self.Diag_box.configure(width=10)
        for label in RADLEX:
            self.Diag_box.insert('end',label)
        self.Diag_box_selected = ScrolledListBox(self.Diagnosis_tab, selectmode='multiple')
        self.Diag_box_selected.place(relx=0.64, rely=0.15, relheight=0.8
                , relwidth=0.34)
        self.Diag_box_selected.configure(background="white")
        self.Diag_box_selected.configure(disabledforeground="#a3a3a3")
        self.Diag_box_selected.configure(font="TkFixedFont")
        self.Diag_box_selected.configure(foreground="black")
        self.Diag_box_selected.configure(highlightbackground="#d9d9d9")
        self.Diag_box_selected.configure(highlightcolor="#d9d9d9")
        self.Diag_box_selected.configure(selectbackground="#c4c4c4")
        self.Diag_box_selected.configure(selectforeground="black")
        self.Diag_box_selected.configure(width=10)

        self.Label5_18 = Label(self.Diagnosis_tab, anchor='w')
        self.Label5_18.place(relx=0.01, rely=0.08, height=31, width=141)
        self.Label5_18.configure(activebackground="#f9f9f9")
        self.Label5_18.configure(activeforeground="black")
        self.Label5_18.configure(background="#d9d9d9")
        self.Label5_18.configure(disabledforeground="#a3a3a3")
        self.Label5_18.configure(foreground="#000000")
        self.Label5_18.configure(highlightbackground="#d9d9d9")
        self.Label5_18.configure(highlightcolor="black")
        self.Label5_18.configure(text='''Findings Contains''')

        self.findings_cont = Entry(self.Diagnosis_tab)
        self.findings_cont.place(relx=0.18, rely=0.08,height=26, relwidth=0.44)
        self.findings_cont.configure(background="white")
        self.findings_cont.configure(disabledforeground="#a3a3a3")
        self.findings_cont.configure(font="TkFixedFont")
        self.findings_cont.configure(foreground="#000000")
        self.findings_cont.configure(insertbackground="black")
        self.findings_cont.configure(width=544)

        self.Label5_19 = Label(self.Diagnosis_tab, anchor='w')
        self.Label5_19.place(relx=0.01, rely=0.14, height=31, width=161)
        self.Label5_19.configure(activebackground="#f9f9f9")
        self.Label5_19.configure(activeforeground="black")
        self.Label5_19.configure(background="#d9d9d9")
        self.Label5_19.configure(disabledforeground="#a3a3a3")
        self.Label5_19.configure(foreground="#000000")
        self.Label5_19.configure(highlightbackground="#d9d9d9")
        self.Label5_19.configure(highlightcolor="black")
        self.Label5_19.configure(text='''Impression Contains''')
        self.Label5_19.configure(width=161)

        self.impressions_cont = Entry(self.Diagnosis_tab)
        self.impressions_cont.place(relx=0.18, rely=0.14,height=26, relwidth=0.44)
        self.impressions_cont.configure(background="white")
        self.impressions_cont.configure(disabledforeground="#a3a3a3")
        self.impressions_cont.configure(font="TkFixedFont")
        self.impressions_cont.configure(foreground="#000000")
        self.impressions_cont.configure(highlightbackground="#d9d9d9")
        self.impressions_cont.configure(highlightcolor="black")
        self.impressions_cont.configure(insertbackground="black")
        self.impressions_cont.configure(selectbackground="#c4c4c4")
        self.impressions_cont.configure(selectforeground="black")

        self.Label5_20 = Label(self.Diagnosis_tab, anchor='w')
        self.Label5_20.place(relx=0.01, rely=0.19, height=31, width=141)
        self.Label5_20.configure(activebackground="#f9f9f9")
        self.Label5_20.configure(activeforeground="black")
        self.Label5_20.configure(background="#d9d9d9")
        self.Label5_20.configure(disabledforeground="#a3a3a3")
        self.Label5_20.configure(foreground="#000000")
        self.Label5_20.configure(highlightbackground="#d9d9d9")
        self.Label5_20.configure(highlightcolor="black")
        self.Label5_20.configure(text='''Recommendation''')
        self.Label5_20.configure(width=141)

        self.rec_box = ttk.Combobox(self.Diagnosis_tab)
        self.rec_box.place(relx=0.18, rely=0.19, relheight=0.04
                , relwidth=0.43)
        self.rec_box.configure(textvariable=AI_Portal_GUI_support.combobox2)
        self.rec_box.configure(width=542)
        self.rec_box.configure(takefocus="")
        self.rec_box['values'] = ('None','6-month follow-up procedure','12-month follow-up procedure','follow-up procedure')

        self.Label5_21 = Label(self.Diagnosis_tab, anchor='w')
        self.Label5_21.place(relx=0.01, rely=0.25, height=31, width=111)
        self.Label5_21.configure(activebackground="#f9f9f9")
        self.Label5_21.configure(activeforeground="black")
        self.Label5_21.configure(background="#d9d9d9")
        self.Label5_21.configure(disabledforeground="#a3a3a3")
        self.Label5_21.configure(foreground="#000000")
        self.Label5_21.configure(highlightbackground="#d9d9d9")
        self.Label5_21.configure(highlightcolor="black")
        self.Label5_21.configure(text='''Critical Results''')
        self.Label5_21.configure(width=111)

        self.style.map('cat1_button',background=
            [('selected', _bgcolor), ('active', _ana2color)])
        self.cat1_button = ttk.Checkbutton(self.Diagnosis_tab)
        self.cat1_button.place(relx=0.18, rely=0.25, relwidth=0.09
                , relheight=0.0, height=31)
        self.cat1_button.configure(variable=AI_Portal_GUI_support.crit)
        self.cat1_button.configure(takefocus="")
        self.cat1_button.configure(text='''Category 1''')


        self.cat2_button = ttk.Checkbutton(self.Diagnosis_tab)
        self.cat2_button.place(relx=0.28, rely=0.25, relwidth=0.09
                , relheight=0.0, height=31)
        self.cat2_button.configure(variable=AI_Portal_GUI_support.crit2)
        self.cat2_button.configure(takefocus="")
        self.cat2_button.configure(text='''Category 2''')

        self.cat3_button = ttk.Checkbutton(self.Diagnosis_tab)
        self.cat3_button.place(relx=0.38, rely=0.25, relwidth=0.09
                , relheight=0.0, height=31)
        self.cat3_button.configure(variable=AI_Portal_GUI_support.crit3)
        self.cat3_button.configure(takefocus="")
        self.cat3_button.configure(text='''Category 3''')

        self.Label7 = Label(self.Diagnosis_tab, anchor='w')
        self.Label7.place(relx=0.64, rely=0.1, height=31, width=160)
        self.Label7.configure(background="#d9d9d9")
        self.Label7.configure(disabledforeground="#a3a3a3")
        self.Label7.configure(foreground="#000000")
        self.Label7.configure(text='''Selected Diagnoses''')

        self.Label3 = Label(self.Patient_tab, anchor='w')
        self.Label3.place(relx=0.01, rely=0.08, height=31, width=93)
        self.Label3.configure(background="#d9d9d9")
        self.Label3.configure(disabledforeground="#a3a3a3")
        self.Label3.configure(foreground="#000000")
        self.Label3.configure(text='''Age Range''')

        self.Label3_9 = Label(self.Patient_tab, anchor='w')
        self.Label3_9.place(relx=0.01, rely=0.14, height=31, width=93)
        self.Label3_9.configure(activebackground="#f9f9f9")
        self.Label3_9.configure(activeforeground="black")
        self.Label3_9.configure(background="#d9d9d9")
        self.Label3_9.configure(disabledforeground="#a3a3a3")
        self.Label3_9.configure(foreground="#000000")
        self.Label3_9.configure(highlightbackground="#d9d9d9")
        self.Label3_9.configure(highlightcolor="black")
        self.Label3_9.configure(text='''Patient Sex''')

        self.Label3_10 = Label(self.Patient_tab, anchor='w')
        self.Label3_10.place(relx=0.01, rely=0.19, height=31, width=133)
        self.Label3_10.configure(activebackground="#f9f9f9")
        self.Label3_10.configure(activeforeground="black")
        self.Label3_10.configure(background="#d9d9d9")
        self.Label3_10.configure(disabledforeground="#a3a3a3")
        self.Label3_10.configure(foreground="#000000")
        self.Label3_10.configure(highlightbackground="#d9d9d9")
        self.Label3_10.configure(highlightcolor="black")
        self.Label3_10.configure(text='''Smoking History''')

        self.procedure_button = Button(self.Study_tab, text='>', command=lambda: New_Toplevel.AddProc(self))
        self.procedure_button.place(relx=.55,rely=.5,height=30,width=30)
        self.procedure_button_del = Button(self.Study_tab, text='<', command=lambda: New_Toplevel.DelProc(self))
        self.procedure_button_del.place(relx=.55,rely=.6,height=30,width=30)
        
        self.diag_button = Button(self.Diagnosis_tab, text='>', command=lambda: New_Toplevel.AddDiag(self))
        self.diag_button.place(relx=.62,rely=.5,height=30,width=30)
        self.diag_button_del = Button(self.Diagnosis_tab, text='<', command=lambda: New_Toplevel.DelDiag(self))
        self.diag_button_del.place(relx=.62,rely=.6,height=30,width=30)
        
        self.tNo39_t2_lab67 = Label(self.Patient_tab, anchor='w')
        self.tNo39_t2_lab67.place(relx=0.0, rely=0.0, height=1, width=1)
        self.tNo39_t2_lab67.configure(activebackground="#f9f9f9")
        self.tNo39_t2_lab67.configure(activeforeground="black")
        self.tNo39_t2_lab67.configure(background="#d9d9d9")
        self.tNo39_t2_lab67.configure(disabledforeground="#a3a3a3")
        self.tNo39_t2_lab67.configure(foreground="#00FF00")
        self.tNo39_t2_lab67.configure(highlightbackground="#d9d9d9")
        self.tNo39_t2_lab67.configure(highlightcolor="black")
        self.tNo39_t2_lab67.configure(text='''Age Range''')

        self.Label3_10 = Label(self.Patient_tab, anchor='w')
        self.Label3_10.place(relx=0.01, rely=0.25, height=31, width=113)
        self.Label3_10.configure(activebackground="#f9f9f9")
        self.Label3_10.configure(activeforeground="black")
        self.Label3_10.configure(background="#d9d9d9")
        self.Label3_10.configure(disabledforeground="#a3a3a3")
        self.Label3_10.configure(foreground="#000000")
        self.Label3_10.configure(highlightbackground="#d9d9d9")
        self.Label3_10.configure(highlightcolor="black")
        self.Label3_10.configure(text='''Ethnicity/Race''')

        self.patient_range_year1 = Spinbox(self.Patient_tab, from_=0, to=120)
        self.patient_range_year1.place(relx=0.17, rely=0.08,relheight=.04, relwidth=0.07)
        self.patient_range_year1.configure(activebackground="#f9f9f9")
        self.patient_range_year1.configure(background="white")
        self.patient_range_year1.configure(buttonbackground="#d9d9d9")
        self.patient_range_year1.configure(disabledforeground="#a3a3a3")
        self.patient_range_year1.configure(foreground="black")
        #self.patient_range_year1.configure(from_="1.0")
        self.patient_range_year1.configure(highlightbackground="black")
        self.patient_range_year1.configure(highlightcolor="black")
        self.patient_range_year1.configure(insertbackground="black")
        self.patient_range_year1.configure(selectbackground="#c4c4c4")
        self.patient_range_year1.configure(selectforeground="black")
        self.patient_range_year1.configure(textvariable=AI_Portal_GUI_support.spinbox7)

        self.patient_range_year2 = Spinbox(self.Patient_tab, from_=0, to=120)
        self.patient_range_year2.place(relx=0.28, rely=0.08,relheight=.04, relwidth=0.07)
        self.patient_range_year2.configure(activebackground="#f9f9f9")
        self.patient_range_year2.configure(background="white")
        self.patient_range_year2.configure(buttonbackground="#d9d9d9")
        self.patient_range_year2.configure(disabledforeground="#a3a3a3")
        self.patient_range_year2.configure(foreground="black")
        #self.patient_range_year2.configure(from_="1.0")
        self.patient_range_year2.configure(highlightbackground="black")
        self.patient_range_year2.configure(highlightcolor="black")
        self.patient_range_year2.configure(insertbackground="black")
        self.patient_range_year2.configure(selectbackground="#c4c4c4")
        self.patient_range_year2.configure(selectforeground="black")
        self.patient_range_year2.configure(textvariable=AI_Portal_GUI_support.spinbox8)

        self.Label4 = Label(self.Patient_tab, anchor='w')
        self.Label4.place(relx=0.24, rely=0.08, height=31, width=47)
        self.Label4.configure(background="#d9d9d9")
        self.Label4.configure(disabledforeground="#a3a3a3")
        self.Label4.configure(foreground="#000000")
        self.Label4.configure(text='''to''')
        self.Label4.configure(width=47)

        # Sex section
        self.any_sex_button = ttk.Checkbutton(self.Patient_tab)
        self.any_sex_button.place(relx=0.17, rely=0.14, relheight=0.05
                , relwidth=0.05)
        self.any_sex_button.configure(variable=AI_Portal_GUI_support.sex_select)
        self.any_sex_button.configure(text='''Any''')

        self.F_sex_button = ttk.Checkbutton(self.Patient_tab)
        self.F_sex_button.place(relx=0.22, rely=0.14, relheight=0.05
                , relwidth=0.04)
        self.F_sex_button.configure(text='''F''')
        self.F_sex_button.configure(variable=AI_Portal_GUI_support.sex_select2)

        self.M_sex_button = ttk.Checkbutton(self.Patient_tab)
        self.M_sex_button.place(relx=0.29, rely=0.14, relheight=0.05
                , relwidth=0.04)
        self.M_sex_button.configure(text='''M''')
        self.M_sex_button.configure(variable=AI_Portal_GUI_support.sex_select3)

        self.other_sex_button = ttk.Checkbutton(self.Patient_tab)
        self.other_sex_button.place(relx=0.4, rely=0.14, relheight=0.05
                , relwidth=0.05)
        self.other_sex_button.configure(text='''Other''')
        self.other_sex_button.configure(variable=AI_Portal_GUI_support.sex_select4)

        # Smoker section
        self.any_smoker_button = ttk.Checkbutton(self.Patient_tab)
        self.any_smoker_button.place(relx=0.17, rely=0.19, relheight=0.05
                , relwidth=0.05)
        self.any_smoker_button.configure(text='''Any''')
        self.any_smoker_button.configure(variable=AI_Portal_GUI_support.smoke_select)

        self.current_smoker_button = ttk.Checkbutton(self.Patient_tab)
        self.current_smoker_button.place(relx=0.39, rely=0.19, relheight=0.05
                , relwidth=0.13)
        self.current_smoker_button.configure(text='''Current smoker''')
        self.current_smoker_button.configure(variable=AI_Portal_GUI_support.smoke_select2)

        self.past_smoker_button = ttk.Checkbutton(self.Patient_tab)
        self.past_smoker_button.place(relx=0.29, rely=0.19, relheight=0.05
                , relwidth=0.09)
        self.past_smoker_button.configure(text='''Past smoker''')
        self.past_smoker_button.configure(width=132)
        self.past_smoker_button.configure(variable=AI_Portal_GUI_support.smoke_select3)

        self.never_smoker_button = ttk.Checkbutton(self.Patient_tab)
        self.never_smoker_button.place(relx=0.22, rely=0.19, relheight=0.05
                , relwidth=0.07)
        self.never_smoker_button.configure(text='''Never''')
        self.never_smoker_button.configure(variable=AI_Portal_GUI_support.smoke_select4)

        # Ethnicity section
        self.Patient_ethn_box = ttk.Combobox(self.Patient_tab)
        self.Patient_ethn_box.place(relx=0.17, rely=0.25, relheight=0.04
                , relwidth=0.35)
        self.Patient_ethn_box.configure(textvariable=AI_Portal_GUI_support.combobox3)
        self.Patient_ethn_box.configure(width=432)
        self.Patient_ethn_box.configure(takefocus="")
        self.Patient_ethn_box['values'] = ('White','Black or African American',
        'American Indian or Alaskan Native','Asian','Native Hawaiian or Pacific Islander',
        'Two or more','Hispanic or Latino')

        self.Label1 = Label(self.Dataset_tab, anchor='w')
        self.Label1.place(relx=0.02, rely=0.07, height=31, width=274)
        self.Label1.configure(background="#d9d9d9")
        self.Label1.configure(disabledforeground="#a3a3a3")
        self.Label1.configure(foreground="#000000")
        self.Label1.configure(text='''Max number of studies to retrieve''')

        self.Label8 = Label(self.Dataset_tab, anchor='w')
        self.Label8.place(relx=0.02, rely=0.13, height=31, width=189)
        self.Label8.configure(background="#d9d9d9")
        self.Label8.configure(disabledforeground="#a3a3a3")
        self.Label8.configure(foreground="#000000")
        self.Label8.configure(text='''Source to retrieve from''')

        self.Label8_24 = Label(self.Dataset_tab, anchor='w')
        self.Label8_24.place(relx=0.02, rely=0.18, height=31, width=99)
        self.Label8_24.configure(activebackground="#f9f9f9")
        self.Label8_24.configure(activeforeground="black")
        self.Label8_24.configure(background="#d9d9d9")
        self.Label8_24.configure(disabledforeground="#a3a3a3")
        self.Label8_24.configure(foreground="#000000")
        self.Label8_24.configure(highlightbackground="#d9d9d9")
        self.Label8_24.configure(highlightcolor="black")
        self.Label8_24.configure(text='''Get reports?''')
        self.Label8_24.configure(width=99)

        self.Label8_25 = Label(self.Dataset_tab, anchor='w')
        self.Label8_25.place(relx=0.02, rely=0.24, height=31, width=279)
        self.Label8_25.configure(activebackground="#f9f9f9")
        self.Label8_25.configure(activeforeground="black")
        self.Label8_25.configure(background="#d9d9d9")
        self.Label8_25.configure(disabledforeground="#a3a3a3")
        self.Label8_25.configure(foreground="#000000")
        self.Label8_25.configure(highlightbackground="#d9d9d9")
        self.Label8_25.configure(highlightcolor="black")
        self.Label8_25.configure(text='''Only get studies that have reports?''')
        self.Label8_25.configure(width=279)

        self.Label8_26 = Label(self.Dataset_tab, anchor='w')
        self.Label8_26.place(relx=0.02, rely=0.29, height=31, width=409)
        self.Label8_26.configure(activebackground="#f9f9f9")
        self.Label8_26.configure(activeforeground="black")
        self.Label8_26.configure(background="#d9d9d9")
        self.Label8_26.configure(disabledforeground="#a3a3a3")
        self.Label8_26.configure(foreground="#000000")
        self.Label8_26.configure(highlightbackground="#d9d9d9")
        self.Label8_26.configure(highlightcolor="black")
        self.Label8_26.configure(text='''Create research PID to maintain PID link to patient?''')
        self.Label8_26.configure(width=409)

        self.Retrieve_src = Entry(self.Dataset_tab)
        self.Retrieve_src.place(relx=0.38, rely=0.13,height=26, relwidth=0.2)
        self.Retrieve_src.configure(background="white")
        self.Retrieve_src.configure(disabledforeground="#a3a3a3")
        self.Retrieve_src.configure(font="TkFixedFont")
        self.Retrieve_src.configure(foreground="#000000")
        self.Retrieve_src.configure(insertbackground="black")

        self.max_studies = Spinbox(self.Dataset_tab, from_=1.0, to=100.0)
        self.max_studies.place(relx=0.38, rely=0.07, relheight=0.04, relwidth=0.2)
        self.max_studies.configure(activebackground="#f9f9f9")
        self.max_studies.configure(background="white")
        self.max_studies.configure(buttonbackground="#d9d9d9")
        self.max_studies.configure(disabledforeground="#a3a3a3")
        self.max_studies.configure(foreground="black")
        self.max_studies.configure(from_="0")
        self.max_studies.configure(to="10000000000000")
        self.max_studies.configure(highlightbackground="black")
        self.max_studies.configure(highlightcolor="black")
        self.max_studies.configure(insertbackground="black")
        self.max_studies.configure(selectbackground="#c4c4c4")
        self.max_studies.configure(selectforeground="black")
        self.max_studies.configure(textvariable=AI_Portal_GUI_support.spinbox)
        self.max_studies.configure(width=248)

        get_reports = IntVar()
        self.yes_reports = Radiobutton(self.Dataset_tab, variable=get_reports,value=1)
        self.yes_reports.place(relx=0.38, rely=0.17, relheight=0.05
                , relwidth=0.05)
        self.yes_reports.configure(activebackground="#d9d9d9")
        self.yes_reports.configure(activeforeground="#000000")
        self.yes_reports.configure(background="#d9d9d9")
        self.yes_reports.configure(disabledforeground="#a3a3a3")
        self.yes_reports.configure(foreground="#000000")
        self.yes_reports.configure(highlightbackground="#d9d9d9")
        self.yes_reports.configure(highlightcolor="black")
        self.yes_reports.configure(justify=LEFT)
        self.yes_reports.configure(text='''Yes''')
        self.yes_reports.configure(variable=AI_Portal_GUI_support.get_reports)

        self.no_reports = Radiobutton(self.Dataset_tab, variable=get_reports,value=0)
        self.no_reports.place(relx=0.44, rely=0.17, relheight=0.05
                , relwidth=0.05)
        self.no_reports.configure(activebackground="#d9d9d9")
        self.no_reports.configure(activeforeground="#000000")
        self.no_reports.configure(background="#d9d9d9")
        self.no_reports.configure(disabledforeground="#a3a3a3")
        self.no_reports.configure(foreground="#000000")
        self.no_reports.configure(highlightbackground="#d9d9d9")
        self.no_reports.configure(highlightcolor="black")
        self.no_reports.configure(justify=LEFT)
        self.no_reports.configure(text='''No''')
        self.no_reports.configure(variable=AI_Portal_GUI_support.get_reports)
        self.yes_reports.select()

        only_reports = IntVar()
        self.yes_only_reports = Radiobutton(self.Dataset_tab, variable=only_reports,value=1)
        self.yes_only_reports.place(relx=0.38, rely=0.22, relheight=0.05
                , relwidth=0.05)
        self.yes_only_reports.configure(activebackground="#d9d9d9")
        self.yes_only_reports.configure(activeforeground="#000000")
        self.yes_only_reports.configure(background="#d9d9d9")
        self.yes_only_reports.configure(disabledforeground="#a3a3a3")
        self.yes_only_reports.configure(foreground="#000000")
        self.yes_only_reports.configure(highlightbackground="#d9d9d9")
        self.yes_only_reports.configure(highlightcolor="black")
        self.yes_only_reports.configure(justify=LEFT)
        self.yes_only_reports.configure(text='''Yes''')
        self.yes_only_reports.configure(variable=AI_Portal_GUI_support.get_only_reports)

        self.not_only_reports = Radiobutton(self.Dataset_tab, variable=only_reports,value=0)
        self.not_only_reports.place(relx=0.44, rely=0.22, relheight=0.05
                , relwidth=0.05)
        self.not_only_reports.configure(activebackground="#d9d9d9")
        self.not_only_reports.configure(activeforeground="#000000")
        self.not_only_reports.configure(background="#d9d9d9")
        self.not_only_reports.configure(disabledforeground="#a3a3a3")
        self.not_only_reports.configure(foreground="#000000")
        self.not_only_reports.configure(highlightbackground="#d9d9d9")
        self.not_only_reports.configure(highlightcolor="black")
        self.not_only_reports.configure(justify=LEFT)
        self.not_only_reports.configure(text='''No''')
        self.not_only_reports.configure(variable=AI_Portal_GUI_support.get_only_reports)
        self.yes_only_reports.select()

        rpid = IntVar()
        self.rpid_yes = Radiobutton(self.Dataset_tab, variable=rpid,value=1)
        self.rpid_yes.place(relx=0.38, rely=0.28, relheight=0.05
                , relwidth=0.05)
        self.rpid_yes.configure(activebackground="#d9d9d9")
        self.rpid_yes.configure(activeforeground="#000000")
        self.rpid_yes.configure(background="#d9d9d9")
        self.rpid_yes.configure(disabledforeground="#a3a3a3")
        self.rpid_yes.configure(foreground="#000000")
        self.rpid_yes.configure(highlightbackground="#d9d9d9")
        self.rpid_yes.configure(highlightcolor="black")
        self.rpid_yes.configure(justify=LEFT)
        self.rpid_yes.configure(text='''Yes''')
        self.rpid_yes.configure(variable=AI_Portal_GUI_support.research_PID)

        self.rpid_no = Radiobutton(self.Dataset_tab, variable=rpid,value=0)
        self.rpid_no.place(relx=0.44, rely=0.28, relheight=0.05
                , relwidth=0.05)
        self.rpid_no.configure(activebackground="#d9d9d9")
        self.rpid_no.configure(activeforeground="#000000")
        self.rpid_no.configure(background="#d9d9d9")
        self.rpid_no.configure(disabledforeground="#a3a3a3")
        self.rpid_no.configure(foreground="#000000")
        self.rpid_no.configure(highlightbackground="#d9d9d9")
        self.rpid_no.configure(highlightcolor="black")
        self.rpid_no.configure(justify=LEFT)
        self.rpid_no.configure(text='''No''')
        self.rpid_no.configure(variable=AI_Portal_GUI_support.research_PID)
        self.rpid_yes.select()

        ## Download Notepage

        #Buttons
        self.download_instructions = Label(self.Download_tab, text = 'When you are satisfied with your selections, preview the data set and then sumbit the query')
        self.download_instructions.place(relx=0.15, rely=0.1, relheight=0.05, relwidth = 0.7)

        self.preview_button = Button(self.Download_tab, text = 'Preview Dataset', command=lambda: New_Toplevel.Preview_dataset(self))
        self.preview_button.place(relx=0.4, rely=0.2, relheight=0.05, relwidth = 0.2)

        self.submit_query_button = Button(self.Download_tab, text = 'Submit Query', command=lambda: New_Toplevel.Submit_query(self))
        self.submit_query_button.place(relx=0.4, rely=0.35, relheight=0.05, relwidth = 0.2)

        self.get_dicom_button = Button(self.Download_tab, text = 'Get DICOM Images', command=lambda: New_Toplevel.Get_DICOM_images(self))
        self.get_dicom_button.place(relx=0.4, rely=0.5, relheight=0.05, relwidth = 0.2)

# The following code is added to facilitate the Scrolled widgets you specified.
class AutoScroll(object):
    '''Configure the scrollbars for a widget.'''

    def __init__(self, master):
        #  Rozen. Added the try-except clauses so that this class
        #  could be used for scrolled entry widget for which vertical
        #  scrolling is not supported. 5/7/14.
        try:
            vsb = ttk.Scrollbar(master, orient='vertical', command=self.yview)
        except:
            pass
        hsb = ttk.Scrollbar(master, orient='horizontal', command=self.xview)

        #self.configure(yscrollcommand=_autoscroll(vsb),
        #    xscrollcommand=_autoscroll(hsb))
        try:
            self.configure(yscrollcommand=self._autoscroll(vsb))
        except:
            pass
        self.configure(xscrollcommand=self._autoscroll(hsb))

        self.grid(column=0, row=0, sticky='nsew')
        try:
            vsb.grid(column=1, row=0, sticky='ns')
        except:
            pass
        hsb.grid(column=0, row=1, sticky='ew')

        master.grid_columnconfigure(0, weight=1)
        master.grid_rowconfigure(0, weight=1)

        # Copy geometry methods of master  (taken from ScrolledText.py)
        if py3:
            methods = Pack.__dict__.keys() | Grid.__dict__.keys() \
                  | Place.__dict__.keys()
        else:
            methods = Pack.__dict__.keys() + Grid.__dict__.keys() \
                  + Place.__dict__.keys()

        for meth in methods:
            if meth[0] != '_' and meth not in ('config', 'configure'):
                setattr(self, meth, getattr(master, meth))

    @staticmethod
    def _autoscroll(sbar):
        '''Hide and show scrollbar as needed.'''
        def wrapped(first, last):
            first, last = float(first), float(last)
            if first <= 0 and last >= 1:
                sbar.grid_remove()
            else:
                sbar.grid()
            sbar.set(first, last)
        return wrapped

    def __str__(self):
        return str(self.master)

def _create_container(func):
    '''Creates a ttk Frame with a given master, and use this new frame to
    place the scrollbars and the widget.'''
    def wrapped(cls, master, **kw):
        container = ttk.Frame(master)
        return func(cls, container, **kw)
    return wrapped

class ScrolledListBox(AutoScroll, Listbox):
    '''A standard Tkinter Text widget with scrollbars that will
    automatically show/hide as needed.'''
    @_create_container
    def __init__(self, master, **kw):
        Listbox.__init__(self, master, **kw)
        AutoScroll.__init__(self, master)

if __name__ == '__main__':
    vp_start_gui()